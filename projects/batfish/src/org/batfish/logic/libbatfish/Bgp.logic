block(`Bgp) {
   alias_all(`libbatfish:AsPath),
   alias_all(`libbatfish:BgpAdvertisement),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:PolicyMap),
   alias_all(`libbatfish:Route),
   export(`{

AdvertisementClusterId(advert, clusterId) ->
   BgpAdvertisement(advert),
   int(clusterId).

BestBgpAdvertisement(advert) ->
   BgpAdvertisement(advert).

/// [BestBgpRoute(node, network, nextHop, nextHopIp, admin, cost, hopCount)] =
///   Node [Node] has a bgp route to network [network] through next hop
///   [nextHop] at ip address [nextHopIp], with minimal administrative distance
///   [admin], and minimal cost for that administrative distance [cost], and
///   which is a preferred path.
BestBgpRoute(route) ->
   Route(route).

BestBgpRouteNetwork(node, network) ->
   Node(node),
   Network(network).

BestIbgpRoute(route) ->
   Route(route).

BgpAdvertisementRoute[advert] = route ->
   BgpAdvertisement(advert),
   Route(route).

BgpDefaultLocalPref(node, neighborIp, localPref) ->
   Node(node),
   Ip(neighborIp),
   int(localPref).

BgpExportPolicy(node, neighborIp, map) ->
   Node(node),
   Ip(neighborIp),
   PolicyMap(map).

BgpGeneratedRoute(route) ->
   Route(route).

BgpImportPolicy(node, neighborIp, map) ->
   Node(node),
   Ip(neighborIp),
   PolicyMap(map).

BgpNeighborDefaultMetric(node, neighborIp, metric) ->
   Node(node),
   Ip(neighborIp),
   int(metric).

BgpNeighborGeneratedRoute(route) ->
   Route(route).

BgpNeighborGeneratedRoute_constructor[node, network, neighborIp] = route ->
   Node(node),
   Network(network),
   Ip(neighborIp),
   Route(route).

BgpNeighborGeneratedRoutePolicy(node, neighborIp, network, map) ->
   Node(node),
   Ip(neighborIp),
   Network(network),
   PolicyMap(map).

BgpNeighborIp(node, neighborIp) ->
   Node(node),
   Ip(neighborIp).

BgpNeighborIpGeneratedRoute(node, neighborIp, network) ->
   Node(node),
   Ip(neighborIp),
   Network(network).

/// [BgpNeighbors(node1, ip1, node2, ip2)] =
///   Node [node1] is a neighbor to [node2] at addresses [ip1] and [ip2]
///   respectively.
BgpNeighbors(node1, ip1, node2, ip2) ->
   Node(node1),
   Ip(ip1),
   Node(node2),
   Ip(ip2).

BgpNeighborSendCommunity(node, neighborIp) ->
   Node(node),
   Ip(neighborIp).

BgpOriginationPolicy(node, neighborIp, map) ->
   Node(node),
   Ip(neighborIp),
   PolicyMap(map).

/// [IbgpNeighbors(node1, ip1, node2, ip2)] =
///   Node [node1] is an ibgp neighbor to [node2] at addresses [ip1] and [ip2]
///   respectively.
IbgpNeighbors(node1, ip1, node2, ip2) ->
   Node(node1),
   Ip(ip1),
   Node(node2),
   Ip(ip2).

IbgpNeighborTo(node, neighbor, neighborIp) ->
   Node(node),
   Node(neighbor),
   Ip(neighborIp).

InstalledBgpAdvertisement(advert) ->
   BgpAdvertisement(advert).

InstalledBgpAdvertisementRoute[advert] = route ->
   BgpAdvertisement(advert),
   Route(route).

LocalAs(node, neighborIp, localAs) ->
   Node(node),
   Ip(neighborIp),
   AutonomousSystem(localAs).

MaxLocalPref[node, network] = maxLocalPref ->
   Node(node),
   Network(network),
   int(maxLocalPref).

MaxLocalPrefBgpAdvertisement(advert) ->
   BgpAdvertisement(advert).

MinAsPathLengthBgpAdvertisement(advert) ->
   BgpAdvertisement(advert).   

MinAsPathSize[node, network] = minSize ->
   Node(node),
   Network(network),
   int(minSize).

OriginalBgpAdvertisement(advert) ->
   BgpAdvertisement(advert).

OriginalBgpAdvertisementRoute(advert, route) ->
   BgpAdvertisement(advert),
   Route(route).

OriginatedBgpNetwork(node, network) ->
   Node(node),
   Network(network).

ParentAdvertisement(parent, child) ->
   BgpAdvertisement(parent),
   BgpAdvertisement(child).

ReceivedBgpAdvertisement(advert) ->
   BgpAdvertisement(advert).

RemoteAs(node, neighborIp, remoteAs) ->
   Node(node),
   Ip(neighborIp),
   AutonomousSystem(remoteAs).

RouteReflectorClient(node, neighborIp, clusterId) ->
   Node(node),
   Ip(neighborIp),
   int(clusterId).

SetBgpDefaultLocalPref(node, neighborNetwork, localPref) ->
   Node(node),
   Network(neighborNetwork),
   int(localPref).

SetBgpDefaultLocalPref_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length, localPref) ->
   Node(node),
   int(neighborNetwork_start),
   int(neighborNetwork_end),
   int(neighborNetwork_prefix_length),
   int(localPref).

SetBgpExportPolicy(node, neighborNetwork, map) ->
   Node(node),
   Network(neighborNetwork),
   PolicyMap(map).

SetBgpExportPolicy_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length, map) ->
   Node(node),
   int(neighborNetwork_start),
   int(neighborNetwork_end),
   int(neighborNetwork_prefix_length),
   PolicyMap(map).

SetBgpGeneratedRoute(node, network) ->
   Node(node),
   Network(network).

SetBgpGeneratedRoute_flat(node, network_start, network_end, prefix_length) ->
   Node(node),
   int(network_start),
   int(network_end),
   int(prefix_length).

SetBgpGeneratedRoutePolicy(node, network, map) ->
   Node(node),
   Network(network),
   PolicyMap(map).

SetBgpGeneratedRoutePolicy_flat(node, network_start, network_end, prefix_length, map) ->
   Node(node),
   int(network_start),
   int(network_end),
   int(prefix_length),
   PolicyMap(map).

SetBgpImportPolicy(node, neighborNetwork, map) ->
   Node(node),
   Network(neighborNetwork),
   PolicyMap(map).

SetBgpImportPolicy_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length, map) ->
   Node(node),
   int(neighborNetwork_start),
   int(neighborNetwork_end),
   int(neighborNetwork_prefix_length),
   PolicyMap(map).

SetBgpNeighborDefaultMetric(node, neighborNetwork, metric) ->
   Node(node),
   Network(neighborNetwork),
   int(metric).

SetBgpNeighborDefaultMetric_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length, metric) ->
   Node(node),
   int(neighborNetwork_start),
   int(neighborNetwork_end),
   int(neighborNetwork_prefix_length),
   int(metric).

SetBgpNeighborGeneratedRoute(node, neighborNetwork, network) ->
   Node(node),
   Network(neighborNetwork),
   Network(network).

SetBgpNeighborGeneratedRoute_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length, network_start, network_end, prefix_length) ->
   Node(node),
   int(neighborNetwork_start),
   int(neighborNetwork_end),
   int(neighborNetwork_prefix_length),
   int(network_start),
   int(network_end),
   int(prefix_length).

SetBgpNeighborGeneratedRoutePolicy(node, neighborNetwork, network, map) ->
   Node(node),
   Network(neighborNetwork),
   Network(network),
   PolicyMap(map).

SetBgpNeighborGeneratedRoutePolicy_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length, network_start, network_end, prefix_length, map) ->
   Node(node),
   int(neighborNetwork_start),
   int(neighborNetwork_end),
   int(neighborNetwork_prefix_length),
   int(network_start),
   int(network_end),
   int(prefix_length),
   PolicyMap(map).

SetBgpNeighborNetwork(node, neighborNetwork) ->
   Node(node),
   Network(neighborNetwork).

SetBgpNeighborNetwork_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length) ->
   Node(node),
   int(neighborNetwork_start),
   int(neighborNetwork_end),
   int(neighborNetwork_prefix_length).

SetBgpNeighborSendCommunity(node, neighborNetwork) ->
   Node(node),
   Network(neighborNetwork).

SetBgpNeighborSendCommunity_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length) ->
   Node(node),
   int(neighborNetwork_start),
   int(neighborNetwork_end),
   int(neighborNetwork_prefix_length).

SetBgpOriginationPolicy(node, neighborNetwork, map) ->
   Node(node),
   Network(neighborNetwork),
   PolicyMap(map).

SetBgpOriginationPolicy_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length, map) ->
   Node(node),
   int(neighborNetwork_start),
   int(neighborNetwork_end),
   int(neighborNetwork_prefix_length),
   PolicyMap(map).

SetLocalAs(node, neighborNetwork, localAs) ->
   Node(node),
   Network(neighborNetwork),
   AutonomousSystem(localAs).

/// [SetLocalAs(node, neighborIp, localAs)] =
///   Node [node] is part of autonomous system [as] according to its neighbor
///   at ip [neighborIp].
SetLocalAs_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length, localAs) ->
   Node(node),
   int(neighborNetwork_start),
   int(neighborNetwork_end),
   int(neighborNetwork_prefix_length),
   AutonomousSystem(localAs).

SetRemoteAs(node, neighborNetwork, remoteAs) ->
   Node(node),
   Network(neighborNetwork),
   AutonomousSystem(remoteAs).

SetRemoteAs_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length, remoteAs) ->
   Node(node),
   int(neighborNetwork_start),
   int(neighborNetwork_end),
   int(neighborNetwork_prefix_length),
   AutonomousSystem(remoteAs).

SetRouteReflectorClient(node, neighborNetwork, clusterId) ->
   Node(node),
   Network(neighborNetwork),
   int(clusterId).

/// [SetRouteReflectorClient(node, neighborIp, clusterId)] =
///   Node [node] has designated its neighbor at ip [neighborIp] to be a route
///   reflector client in the cluster identified by [clusterId].
SetRouteReflectorClient_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length, clusterId) ->
   Node(node),
   int(neighborNetwork_start),
   int(neighborNetwork_end),
   int(neighborNetwork_prefix_length),
   int(clusterId).

// END CODE
   }),
   clauses(`{
lang:constructor(`BgpNeighborGeneratedRoute_constructor).
   })
} <-- .

